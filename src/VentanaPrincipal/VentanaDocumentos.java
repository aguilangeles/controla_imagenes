/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package VentanaPrincipal;

import BasedeDatos.GetNumerosDocumentosRechazados;
import Entidades.Imagen;
import Entidades.TrazaDao;
import Helpers.RutaMouseListener;
import Helpers.VersionEImageIcon;
import ReporteLote.ReporteDocumento;
import TratarFile.Sublote;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author aguilangeles@gmail.com
 */
public class VentanaDocumentos extends javax.swing.JFrame {

  private int idArchivo = 0;
  private int idSublote=0;
  private int nrodeImagen = 1;
  private int nroSublote = 1;
  private DefaultTableModel model;
  private TrazaDao traza;
  private final TablaCheckBox tablaCheckBox;
  private Map<Integer, Imagen> mapa;
  private MostrarInternalFramesForDocument mostDoc;
  private Map<Integer, Sublote> mapSublote;

  /**
   * Creates new form Ventana
   *
   * @param trazadao
   * @param sublotes
   */
  public VentanaDocumentos(TrazaDao trazadao, List<Sublote> sublotes) {
    iniciar(trazadao);
//    setExtendedState(6);
    VersionEImageIcon version = new VersionEImageIcon(this);
    initComponents();
    tabla.requestFocus();
    this.traza = trazadao;
    this.tablaCheckBox = new TablaCheckBox(model, tabla, traza);//llena la tabla con los contenidos adecuados
    tabla.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
    terminar.setEnabled(false);
    anterior.setEnabled(false);
    prevDocum.setEnabled(false);
    getFirstImage(version);
    rutaLabel.addMouseListener(new RutaMouseListener());
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    panelInicial = new javax.swing.JPanel();
    desktopPane = new javax.swing.JDesktopPane();
    internal = new javax.swing.JInternalFrame();
    jScrollPane2 = new javax.swing.JScrollPane();
    tabla = new javax.swing.JTable();
    jPanel1 = new javax.swing.JPanel();
    siguiente = new javax.swing.JButton();
    anterior = new javax.swing.JButton();
    combo = new javax.swing.JComboBox();
    jLabel1 = new javax.swing.JLabel();
    entera = new javax.swing.JButton();
    ampliar = new javax.swing.JButton();
    nextDocum = new javax.swing.JButton();
    prevDocum = new javax.swing.JButton();
    rutaLabel = new javax.swing.JLabel();
    pageLabel = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    panelScroll = new javax.swing.JPanel();
    scrollImage = new javax.swing.JScrollPane();
    terminar = new javax.swing.JButton();
    totales = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
    setBackground(new java.awt.Color(230, 252, 238));

    panelInicial.setBackground(new java.awt.Color(230, 252, 238));

    internal.setBackground(new java.awt.Color(230, 252, 238));
    internal.setIconifiable(true);
    internal.setMaximizable(true);
    internal.setResizable(true);
    internal.setVisible(true);

    tabla.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {

      },
      new String [] {
        "", "Nombre", "?"
      }
    ) {
      Class[] types = new Class [] {
        java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
      };

      public Class getColumnClass(int columnIndex) {
        return types [columnIndex];
      }
    });
    jScrollPane2.setViewportView(tabla);

    jPanel1.setOpaque(false);

    siguiente.setFont(new java.awt.Font("Bitstream Vera Sans Mono", 0, 14)); // NOI18N
    siguiente.setMnemonic('S');
    siguiente.setText("Siguiente");
    siguiente.setToolTipText("ALT+S");
    siguiente.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        siguienteActionPerformed(evt);
      }
    });

    anterior.setFont(new java.awt.Font("Bitstream Vera Sans Mono", 0, 14)); // NOI18N
    anterior.setMnemonic('a');
    anterior.setText("Anterior");
    anterior.setToolTipText("ALT+A");
    anterior.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        anteriorActionPerformed(evt);
      }
    });

    combo.setFont(new java.awt.Font("Bitstream Vera Sans Mono", 0, 14)); // NOI18N
    combo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "150%", "125%", "100%", "75%", "50%", "25%" }));

    jLabel1.setFont(new java.awt.Font("Bitstream Vera Sans Mono", 0, 14)); // NOI18N
    jLabel1.setText("Ver Imagen al");

    entera.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imageicon/1383002591_zoom-best-fit_1.png"))); // NOI18N
    entera.setToolTipText("Ajustar una pagina entera a la ventana");

    ampliar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imageicon/1383001847_stock_zoom-page-width_1.png"))); // NOI18N
    ampliar.setToolTipText("Ajustar al ancho de ventana");

    nextDocum.setText("Sig. Doc.");
    nextDocum.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        nextDocumActionPerformed(evt);
      }
    });

    prevDocum.setText("Ant. Doc.");
    prevDocum.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        prevDocumActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(siguiente)
          .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addGap(33, 33, 33)
            .addComponent(ampliar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(anterior, javax.swing.GroupLayout.Alignment.TRAILING)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
            .addComponent(entera, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(21, 21, 21))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
            .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())))
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addComponent(nextDocum, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(prevDocum, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(anterior, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(siguiente, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(24, 24, 24)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addComponent(nextDocum, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
          .addComponent(prevDocum, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(entera, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(ampliar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
    );

    rutaLabel.setFont(new java.awt.Font("Bitstream Vera Sans Mono", 0, 12)); // NOI18N
    rutaLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

    pageLabel.setFont(new java.awt.Font("Bitstream Vera Sans Mono", 0, 12)); // NOI18N
    pageLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

    jLabel2.setFont(new java.awt.Font("Bitstream Vera Sans Mono", 0, 14)); // NOI18N
    jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel2.setText("Tipos de Control");

    panelScroll.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

    javax.swing.GroupLayout panelScrollLayout = new javax.swing.GroupLayout(panelScroll);
    panelScroll.setLayout(panelScrollLayout);
    panelScrollLayout.setHorizontalGroup(
      panelScrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(scrollImage, javax.swing.GroupLayout.DEFAULT_SIZE, 648, Short.MAX_VALUE)
    );
    panelScrollLayout.setVerticalGroup(
      panelScrollLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(scrollImage)
    );

    terminar.setFont(new java.awt.Font("Bitstream Vera Sans Mono", 0, 14)); // NOI18N
    terminar.setMnemonic('t');
    terminar.setText("Terminar");
    terminar.setToolTipText("ALT+T");
    terminar.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        terminarActionPerformed(evt);
      }
    });

    totales.setFont(new java.awt.Font("Bitstream Vera Sans Mono", 0, 12)); // NOI18N

    javax.swing.GroupLayout internalLayout = new javax.swing.GroupLayout(internal.getContentPane());
    internal.getContentPane().setLayout(internalLayout);
    internalLayout.setHorizontalGroup(
      internalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(internalLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(internalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(internalLayout.createSequentialGroup()
            .addComponent(rutaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 574, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(pageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(totales, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addComponent(panelScroll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(internalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
          .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(terminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        .addContainerGap())
    );
    internalLayout.setVerticalGroup(
      internalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(internalLayout.createSequentialGroup()
        .addGroup(internalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addComponent(rutaLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(pageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(totales, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(internalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(internalLayout.createSequentialGroup()
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(terminar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addComponent(panelScroll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addGap(9, 9, 9))
    );

    internal.setBounds(0, 0, 960, 500);
    desktopPane.add(internal, javax.swing.JLayeredPane.DEFAULT_LAYER);

    javax.swing.GroupLayout panelInicialLayout = new javax.swing.GroupLayout(panelInicial);
    panelInicial.setLayout(panelInicialLayout);
    panelInicialLayout.setHorizontalGroup(
      panelInicialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(desktopPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 964, Short.MAX_VALUE)
    );
    panelInicialLayout.setVerticalGroup(
      panelInicialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(desktopPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE)
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(panelInicial, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(panelInicial, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void terminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_terminarActionPerformed
    setFinalizar();
  }//GEN-LAST:event_terminarActionPerformed

  private void anteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anteriorActionPerformed
    getBackImage();
  }//GEN-LAST:event_anteriorActionPerformed

  private void siguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siguienteActionPerformed
    getNextImage();
  }//GEN-LAST:event_siguienteActionPerformed

  private void nextDocumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextDocumActionPerformed
    nextDocument();
  }//GEN-LAST:event_nextDocumActionPerformed

  private void prevDocumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevDocumActionPerformed
    backDocument();

  }//GEN-LAST:event_prevDocumActionPerformed

  private Imagen getImagenWithSublote(int contador) {
    Imagen imagen = mapa.get(contador);
    if (contador == getLastIdArchivo())
      {
      siguiente.setEnabled(false);
      terminar.setEnabled(true);
      }
    return imagen;
  }

  private Imagen backImagen(int contador) {
    Imagen imagen = mapa.get(contador);
    if (contador == getFirstIdArchivo())
      {
      anterior.setEnabled(false);
      prevDocum.setEnabled(false);
      }
    return imagen;
  }

  private int getLastIdArchivo() {
    int sizeSub = mapSublote.size() - 1;
    Sublote sublote = mapSublote.get(sizeSub);
    int ultimo = sublote.getImagenList().size() - 1;
    Imagen im = (Imagen) sublote.getImagenList().get(ultimo);
    return im.getId();
  }

  private int getFirstIdArchivo() {
    Sublote sublote = mapSublote.get(0);
    Imagen im = (Imagen) sublote.getImagenList().get(0);
    return im.getId();
  }

  private void nextDocument() {
    int nextdoc = getNumerosublote();
    Sublote s = mapSublote.get(nextdoc);
    Imagen imagen = (Imagen) s.getImagenList().get(0);
    int id = imagen.getId() - 1;
    setIdArchivo(id);
    setNumerosublote(nextdoc);
    getNextImage();
  }

  private void backDocument() {
    int previus = getSubNumero() - 1;
    Sublote subPrevius = getsublotebyId(previus);
    Imagen imgPrevius = (Imagen) subPrevius.getImagenList().get(1);
    setSubNumero(previus);
    setIdArchivo(imgPrevius.getId());
    setNumerodeImagen(2);
    nroSublote--;
    getBackImage();
  }
  /**
   * @param args the command line arguments
   */
//  public static void main(String args[]) {
//    /* Set the Nimbus look and feel */
//    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
//     */
//    try {
//      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//        if ("Nimbus".equals(info.getName())) {
//          javax.swing.UIManager.setLookAndFeel(info.getClassName());
//          break;
//        }
//      }
//    } catch (ClassNotFoundException ex) {
//      java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//    } catch (InstantiationException ex) {
//      java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//    } catch (IllegalAccessException ex) {
//      java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//      java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//    }
//    //</editor-fold>
//
//    /* Create and display the form */
//    java.awt.EventQueue.invokeLater(new Runnable() {
//      public void run() {
//        new Ventana().setVisible(true);
//      }
//    });
//  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton ampliar;
  private javax.swing.JButton anterior;
  private javax.swing.JComboBox combo;
  private javax.swing.JDesktopPane desktopPane;
  private javax.swing.JButton entera;
  private javax.swing.JInternalFrame internal;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JButton nextDocum;
  private javax.swing.JLabel pageLabel;
  private javax.swing.JPanel panelInicial;
  private javax.swing.JPanel panelScroll;
  private javax.swing.JButton prevDocum;
  private javax.swing.JLabel rutaLabel;
  private javax.swing.JScrollPane scrollImage;
  private javax.swing.JButton siguiente;
  private javax.swing.JTable tabla;
  private javax.swing.JButton terminar;
  private javax.swing.JLabel totales;
  // End of variables declaration//GEN-END:variables

  private void iniciar(TrazaDao traza) {
    mapa = new HashMap<>();
    mapSublote = new HashMap<>();
    List<Object> objList = traza.getObjetoList();
    for (int i = 0; i < objList.size(); i++)
      {
      Sublote sublote1 = (Sublote) objList.get(i);
      mapSublote.put(i, sublote1);
      for (int j = 0; j < sublote1.getImagenList().size(); j++)
        {
        Object object = sublote1.getImagenList().get(j);
        Imagen imagen = (Imagen) object;
        mapa.put(imagen.getId(), imagen);
        }
      }
  }


  private void getFirstImage(VersionEImageIcon version) {
    Sublote sublote = mapSublote.get(0);
    Imagen im = (Imagen) sublote.getImagenList().get(0);
    idArchivo = im.getId();
    idSublote = sublote.getId();
    Imagen siguientes = getImagenWithSublote(idArchivo);//trae el ramdom
    mostDoc = new MostrarInternalFramesForDocument(desktopPane, internal, rutaLabel, pageLabel, panelScroll, tabla, combo, traza, siguiente,
            anterior, ampliar, entera, scrollImage, getTotalDocumentos(), version, nextDocum, prevDocum, totales);
    mostDoc.mostrarPrimeraImagen(siguientes, nrodeImagen, sublote, nroSublote);
  }


  private void getNextImage() {
    idArchivo++;
    nrodeImagen++;
    Imagen imagen1 = getImagenWithSublote(idArchivo);
    Sublote sublote = getsublotebyId(imagen1.getIdSublote());
    int idsub = sublote.getId();
    if (idsub != idSublote)
      {
      nroSublote++;
      setNumerodeImagen(1);
      setSubNumero(idsub);
      }
    if (nroSublote == mapSublote.size())
      {
      setNumerosublote(mapSublote.size());
      nextDocum.setEnabled(false);
      terminar.setEnabled(true);
      }
    mostDoc.setNextImage(imagen1, nrodeImagen, sublote, nroSublote);
  }

  private void getBackImage() {
    idArchivo--;
    nrodeImagen--;
    Imagen pr = backImagen(idArchivo);
    Sublote sb = getsublotebyId(pr.getIdSublote());
    int idsub = sb.getId();
    if (idsub != idSublote)
      {
      nroSublote--;
      setNumerodeImagen(sb.getImagenList().size());
      setSubNumero(idsub);
      }
    if (nroSublote == 1)
      {
      setNumerosublote(1);
      prevDocum.setEnabled(false);
      }
    mostDoc.setBackImage(pr, nrodeImagen, sb, nroSublote);
  }

  public int getNumerosublote() {
    return nroSublote;
  }

  public void setNumerosublote(int numerosublote) {
    this.nroSublote = numerosublote;
  }

  public int getSubNumero() {
    return idSublote;
  }

  public void setSubNumero(int subNumero) {
    this.idSublote = subNumero;
  }

  private Sublote getsublotebyId(int idsublote) {
    Sublote sublote = null;
    for (Map.Entry<Integer, Sublote> entry : mapSublote.entrySet())
      {
      Integer integer = entry.getKey();
      Sublote sub = entry.getValue();
      if (sub.getId() == idsublote)
        {
        sublote = sub;
        }
      }
    return sublote;
  }

  public void setIdArchivo(int contador) {
    this.idArchivo = contador;
  }

  public int getIdArchivo() {
    return idArchivo;
  }

  private void setFinalizar() {
    Guardar save = new Guardar();
    save.guardar(traza, rutaLabel.getText(), tabla, pageLabel);
    GetNumerosDocumentosRechazados numeroRechazo =
            new GetNumerosDocumentosRechazados(traza.getId());

    java.awt.EventQueue.invokeLater(new Runnable() {
      @Override
      public void run() {
        new ReporteDocumento(traza.getId()).setVisible(true);
      }
    });
    dispose();
  }

  public Map<Integer, Imagen> getMapa() {
    return mapa;
  }

  public int getNumerodeImagen() {
    return nrodeImagen;
  }

  public void setNumerodeImagen(int cantidad) {
    this.nrodeImagen = cantidad;
  }

  private int getTotalDocumentos() {
    return mapSublote.size();
  }
}
