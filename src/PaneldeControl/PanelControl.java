/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package PaneldeControl;

import entidad.Usuario;
import Helpers.VersionEImageIcon;
import VentanaPrincipal.ControlDocumentosyVerificaciones;
import Login.IngresoBaseDeDatos;
import Login.Login;
import java.awt.event.KeyEvent;
import javax.swing.JButton;

/**
 *
 * @author MUTNPROD003
 */
public class PanelControl extends javax.swing.JFrame {

  private static final String INFO_LABEL = "<html>La edición de rangos, tipos de"
          + " verificación, controles y alta de usuarios, sólo esta permitido al "
          + "administrador.</html>";
  private boolean administrador;

  /**
   * Creates new form PanelControl
   */

  public PanelControl() {
    initComponents();
    VersionEImageIcon versionEImageIcon = new VersionEImageIcon();
    versionEImageIcon.newColorFromPanel(panelColor);
    jLabel1.setText(INFO_LABEL);
    Usuario usuarioTipo = Login.getUsuario();
    this.administrador = usuarioTipo.isAdmin();
    if (!administrador)
      {
      rangos.setEnabled(false);
      controles.setEnabled(false);
      alta_usuarios.setEnabled(false);
      verificacion.setEnabled(false);
      }
  }

  public boolean isAdministrador() {
    return administrador;
  }
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    panelColor = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    base_datos = new javax.swing.JButton();
    rangos = new javax.swing.JButton();
    controles = new javax.swing.JButton();
    alta_usuarios = new javax.swing.JButton();
    cargar_lote = new javax.swing.JButton();
    verificacion = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("Panel de Control");
    setResizable(false);

    jLabel1.setBackground(new java.awt.Color(204, 255, 204));
    jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

    base_datos.setFont(new java.awt.Font("Bitstream Vera Sans Mono", 0, 14)); // NOI18N
    base_datos.setMnemonic('b');
    base_datos.setText("Base de Datos");
    base_datos.setToolTipText("alt+b");
    base_datos.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        base_datosActionPerformed(evt);
      }
    });
    base_datos.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyPressed(java.awt.event.KeyEvent evt) {
        base_datosKeyPressed(evt);
      }
    });

    rangos.setFont(new java.awt.Font("Bitstream Vera Sans Mono", 0, 14)); // NOI18N
    rangos.setMnemonic('r');
    rangos.setText("Rangos");
    rangos.setToolTipText("alt+r");
    rangos.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        rangosActionPerformed(evt);
      }
    });
    rangos.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyPressed(java.awt.event.KeyEvent evt) {
        rangosKeyPressed(evt);
      }
    });

    controles.setFont(new java.awt.Font("Bitstream Vera Sans Mono", 0, 14)); // NOI18N
    controles.setMnemonic('c');
    controles.setText("Controles");
    controles.setToolTipText("alt+c");
    controles.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        controlesActionPerformed(evt);
      }
    });
    controles.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyPressed(java.awt.event.KeyEvent evt) {
        controlesKeyPressed(evt);
      }
    });

    alta_usuarios.setFont(new java.awt.Font("Bitstream Vera Sans Mono", 0, 14)); // NOI18N
    alta_usuarios.setMnemonic('u');
    alta_usuarios.setText("Usuarios");
    alta_usuarios.setToolTipText("alt+u");
    alta_usuarios.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        alta_usuariosActionPerformed(evt);
      }
    });
    alta_usuarios.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyPressed(java.awt.event.KeyEvent evt) {
        alta_usuariosKeyPressed(evt);
      }
    });

    cargar_lote.setFont(new java.awt.Font("Bitstream Vera Sans Mono", 0, 14)); // NOI18N
    cargar_lote.setMnemonic('l');
    cargar_lote.setText("Cargar Lote");
    cargar_lote.setToolTipText("alt+l;");
    cargar_lote.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cargar_loteActionPerformed(evt);
      }
    });
    cargar_lote.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyPressed(java.awt.event.KeyEvent evt) {
        cargar_loteKeyPressed(evt);
      }
    });

    verificacion.setFont(new java.awt.Font("Bitstream Vera Sans Mono", 0, 14)); // NOI18N
    verificacion.setMnemonic('v');
    verificacion.setText("Verificación");
    verificacion.setToolTipText("alt+v");
    verificacion.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        verificacionActionPerformed(evt);
      }
    });
    verificacion.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyPressed(java.awt.event.KeyEvent evt) {
        verificacionKeyPressed(evt);
      }
    });

    javax.swing.GroupLayout panelColorLayout = new javax.swing.GroupLayout(panelColor);
    panelColor.setLayout(panelColorLayout);
    panelColorLayout.setHorizontalGroup(
      panelColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(panelColorLayout.createSequentialGroup()
        .addGap(54, 54, 54)
        .addGroup(panelColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addComponent(base_datos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(controles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(rangos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(verificacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(alta_usuarios, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(cargar_lote, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap(56, Short.MAX_VALUE))
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelColorLayout.createSequentialGroup()
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );
    panelColorLayout.setVerticalGroup(
      panelColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(panelColorLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(18, 18, 18)
        .addComponent(base_datos, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(rangos, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(controles, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(verificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(alta_usuarios, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(cargar_lote, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(38, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(panelColor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(panelColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void base_datosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_base_datosActionPerformed
    action(evt);
  }//GEN-LAST:event_base_datosActionPerformed

  private void base_datosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_base_datosKeyPressed
    keyPressed(evt, base_datos);
  }//GEN-LAST:event_base_datosKeyPressed

  private void rangosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rangosActionPerformed
    action(evt);
  }//GEN-LAST:event_rangosActionPerformed

  private void rangosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rangosKeyPressed
    keyPressed(evt, rangos);
  }//GEN-LAST:event_rangosKeyPressed

  private void controlesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_controlesKeyPressed
    keyPressed(evt, controles);
  }//GEN-LAST:event_controlesKeyPressed

  private void controlesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_controlesActionPerformed
    action(evt);
  }//GEN-LAST:event_controlesActionPerformed

  private void verificacionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_verificacionKeyPressed
    keyPressed(evt, verificacion);
  }//GEN-LAST:event_verificacionKeyPressed

  private void verificacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verificacionActionPerformed
    action(evt);
  }//GEN-LAST:event_verificacionActionPerformed

  private void alta_usuariosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_alta_usuariosKeyPressed
    keyPressed(evt, alta_usuarios);
  }//GEN-LAST:event_alta_usuariosKeyPressed

  private void alta_usuariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alta_usuariosActionPerformed
    action(evt);
  }//GEN-LAST:event_alta_usuariosActionPerformed

  private void cargar_loteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cargar_loteKeyPressed
    keyPressed(evt, cargar_lote);
  }//GEN-LAST:event_cargar_loteKeyPressed

  private void cargar_loteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargar_loteActionPerformed
    action(evt);
  }//GEN-LAST:event_cargar_loteActionPerformed
  /**
   * @param args the command line arguments
   */
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton alta_usuarios;
  private javax.swing.JButton base_datos;
  private javax.swing.JButton cargar_lote;
  private javax.swing.JButton controles;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JPanel panelColor;
  private javax.swing.JButton rangos;
  private javax.swing.JButton verificacion;
  // End of variables declaration//GEN-END:variables

  private void getBaseDatos() {
    java.awt.EventQueue.invokeLater(new Runnable() {
      @Override
      public void run() {
        new IngresoBaseDeDatos(isAdministrador()).setVisible(true);
      }
    });
  }

  private void getRangos() {
    java.awt.EventQueue.invokeLater(new Runnable() {
      @Override
      public void run() {
        new RangosABM().setVisible(true);
      }
    });
  }

  private void getControles() {
    java.awt.EventQueue.invokeLater(new Runnable() {
      @Override
      public void run() {
        new ControlesABM().setVisible(true);
      }
    });
  }

  private void getVerificacion() {
    java.awt.EventQueue.invokeLater(new Runnable() {
      @Override
      public void run() {
        new VerificacionABM().setVisible(true);
      }
    });
  }

  private void getUsuarios() {
    java.awt.EventQueue.invokeLater(new Runnable() {
      @Override
      public void run() {
        new UsuariosABM().setVisible(true);
      }
    });
  }

  private void getCargaLote() {
    ControlDocumentosyVerificaciones control =
            new ControlDocumentosyVerificaciones(this);
  }

  private void action(java.awt.event.ActionEvent evt) {
    switch (evt.getActionCommand())
      {
      case "Base de Datos":
        getBaseDatos();
        break;
      case "Rangos":
        getRangos();
        break;
      case "Controles":
        getControles();
        break;
      case "Verificación":
        getVerificacion();
        break;
      case "Usuarios":
        getUsuarios();
        break;
      default:
        getCargaLote();
        break;
      }
  }

  public void keyPressed(KeyEvent e, JButton boton) {
    if (e.getKeyCode() == KeyEvent.VK_ENTER)
      {
      switch (boton.getText())
        {
        case "Base de Datos":
          getBaseDatos();
          break;
        case "Rangos":
          getRangos();
          break;
        case "Controles":
          getControles();
          break;
        case "Verificación":
          getVerificacion();
          break;
        case "Usuarios":
          getUsuarios();
          break;
        default:
          getCargaLote();
          break;
        }
      }
  }
}
